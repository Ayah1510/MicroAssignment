;====================================================================
; Main.asm file generated by New Project wizard
;
; Created:   Thu Jan 21 2021
; Processor: 8086
; Compiler:  MASM32
;
; Before starting simulation set Internal Memory Size 
; in the 8086 model properties to 0x10000
;====================================================================

;CODE    SEGMENT PUBLIC 'CODE'
 ;       ASSUME CS:CODE
 
 .model small
.stack 100
.data

.code
mov ax, @data
mov ds,ax


mov dx, 0c6h
mov al,10000000b
out dx,al

mov dx,46h
mov al, 10010001b
out dx, al

mov al,80h
out 44h, al

mov al, 0A0h
out 44h, al

eoc:
in al, 44h
and al,2
jnz eoc

mov al, 20h
out 44h, al

in al,40h
mov ah, 0
mov cx, 100
mul cx
mov cx,51
div cx
sub ax, 50

mov dx,0
mov ah,0
mov cx,10
div cx
push ax
mov ax,0
mov al,dl

;for the first seven segment:
cmp al,0
JNE loop1
mov bl,0C0H
jmp end1
loop1:
cmp al,1
JNE loop2
mov bl,0F9H
jmp  end1
loop2:
cmp al,2
JNE loop3
mov bl,0A4H
jmp end1
loop3:
cmp al,3
JNE loop4
mov bl,0B0H
jmp end1
loop4:
cmp al,4
JNE loop5
mov bl,99H
jmp end1
loop5:
cmp al,5
JNE loop6
mov bl,92H
jmp end1
loop6:
cmp al,6
JNE loop7
mov bl,82H
jmp end1
loop7:
cmp al,7
JNE loop8
mov bl,0F8H
jmp end1
loop8:
cmp al,8
JNE loop9
mov bl,80H
jmp end1
loop9:
cmp al,9
mov bl,90H
end1:
mov cl,bl
pop ax
push cx

;for the second seven segment:
cmp al,0
JNE loop21
mov bl,0C0H
jmp end2
loop21:
cmp al,1
JNE loop22
mov bl,0F9H
jmp end2
loop22:
cmp al,2
JNE loop23
mov bl,0A4H
jmp end2
loop23:
cmp al,3
JNE loop24
mov bl,0B0H
jmp end2
loop24:
cmp al,4
JNE loop25
mov bl,99H
jmp end2
loop25:
cmp al,5
JNE loop26
mov bl,92H
jmp end2
loop26:
cmp al,6
JNE loop27
mov bl,82H
jmp end2
loop27:
cmp al,7
JNE loop28
mov bl,0F8H
jmp end2
loop28:
cmp al,8
JNE loop29
mov bl,80H
jmp end2
loop29:
cmp al,9
mov bl,90H
end2:
pop cx
mov ch, bl
mov dx,cx

l:
mov al,2
out 0c2h, al
mov al, dl
out 0c0h , al
mov cx, 0ffh
l1:
loop l1
mov al,1
out 0c2h, al
mov al, dh
out 0c0h , al
mov cx, 0ffh
l2:
loop l2
loop l

l3:
jmp l3

delay proc
mov cx, 0ffh
l4:
loop l4
ret
delay endp
end
